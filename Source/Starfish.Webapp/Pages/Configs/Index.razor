@page "/configs"

@attribute [Authorize]

@inject IDialogService DialogService
@inject IConfigurationApi ConfigurationApi
@inject NavigationManager Navigation

<FluentBreadcrumb Style="margin-bottom: 16px;">
    <FluentBreadcrumbItem Href="/">@(Resources.IDS_MENU_TEXT_HOME)</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="/apps">@(Resources.IDS_MENU_TEXT_CONFIGS)</FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentCard>
    <FluentGrid>
        <FluentGridItem lg="12" sm="12" md="12">
            <div class="search-bar">
                <FluentSearch Placeholder="@(Resources.IDS_COMMON_PLACEHOLDER_KEYWORD)"
                              @bind-Value="Criteria.Keyword"/>
                <FluentButton IconStart="@(new Icons.Regular.Size16.Search())" OnClick="@OnSearchClicked">
                    @(Resources.IDS_COMMON_SEARCH)
                </FluentButton>
                <FluentSpacer/>
                <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Appearance="Appearance.Accent"
                              OnClick="@(() => OnEditButtonClicked(string.Empty))">
                    @(Resources.IDS_CONFIG_INDEX_BUTTON_ADD)
                </FluentButton>
            </div>
        </FluentGridItem>
        <FluentGridItem lg="12" sm="12" md="12">
            <FluentDataGrid ItemsProvider="_provider" Pagination="Pagination" ItemSize="46"
                            GenerateHeader="GenerateHeaderOption.Sticky"
                            TGridItem="ConfigurationDto"
                            GridTemplateColumns="0.3fr 0.5fr 0.3fr 0.4fr 0.2fr 0.5fr">
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_COMMON_COLUMN_ID)"
                                Property="@(c => c.Id)"/>
                <TemplateColumn Title="@(Resources.IDS_CONFIG_INDEX_COLUMN_NAME)" Align="@Align.Start">
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => OnGotoConfigurationClicked(context.Id))">
                        @(context.Name)
                    </FluentButton>
                </TemplateColumn>
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_CONFIG_INDEX_COLUMN_TEAM)"
                                Property="@(c => c.TeamName)"/>
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_COMMON_COLUMN_UPDATE_TIME)"
                                Property="@(c => c.UpdateTime)" Format="yyyy-MM-dd HH:mm:ss"/>
                <TemplateColumn Title="@(Resources.IDS_CONFIG_INDEX_COLUMN_STATUS)" Align="@Align.Start">
                    <FluentSwitch Value="@(context.Status != "Disabled")" ValueChanged="@(value => OnStatusChanged(context, value))"/>
                </TemplateColumn>
                <TemplateColumn Title="@(Resources.IDS_COMMON_COLUMN_ACTIONS)" Align="@Align.Center">
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.PreviewLink())"
                                  OnClick="@(() => OnDetailButtonClicked(context.Id))"/>
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())"
                                  OnClick="@(() => OnEditButtonClicked(context.Id))"/>
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.LockClosedKey())"
                                  OnClick="@(() => OnResetSecretClicked(context.Id))"/>
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => OnDeleteButtonClicked(context.Id, context.Name))"/>
                </TemplateColumn>
            </FluentDataGrid>
        </FluentGridItem>
        <FluentGridItem lg="12" sm="12" md="12">
            <FluentDataGridPaginator State="@Pagination"/>
        </FluentGridItem>
    </FluentGrid>
</FluentCard>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private UserPrincipal Identity { get; set; }

    private GridItemsProvider<ConfigurationDto> _provider;

    private PaginationState Pagination { get; } = new() { ItemsPerPage = Constants.Query.Count };

    private ConfigurationCriteria Criteria { get; } = new();

    private int Total { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationState;

        Identity = new UserPrincipal(user.User);

        _provider = async request =>
        {
            List<ConfigurationDto> items = null;
            var tasks = new List<Task>
            {
                ConfigurationApi.QueryAsync(Criteria, request.StartIndex, Pagination.ItemsPerPage, request.CancellationToken)
                                .EnsureSuccess(result => items = result, request.CancellationToken)
            };

            if (request.StartIndex == 0)
            {
                tasks.Add(
                    ConfigurationApi.CountAsync(Criteria, request.CancellationToken)
                                    .EnsureSuccess(result => Total = result, request.CancellationToken)
                );
            }

            await Task.WhenAll(tasks).Guard();
            await Pagination.SetTotalItemCountAsync(Total);
            return GridItemsProviderResult.From(items, Total);
        };
    }

    private async Task OnSearchClicked()
    {
        await Pagination.SetCurrentPageIndexAsync(0);
    }

    private async Task OnEditButtonClicked(string id)
    {
        var title = string.IsNullOrEmpty(id) ? Resources.IDS_CONFIG_EDIT_DIALOG_TITLE_ADD : Resources.IDS_CONFIG_EDIT_DIALOG_TITLE_EDIT;
        var dialog = await DialogService.ShowDialogAsync<Edit>(id, new DialogParameters { Title = title, PreventDismissOnOverlayClick = true });
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            await Pagination.SetCurrentPageIndexAsync(0);
        }
    }

    private async Task OnGotoConfigurationClicked(string id)
    {
        Navigation.NavigateTo($"/configs/{id}");
        await Task.CompletedTask;
    }
    
    private Task OnDetailButtonClicked(string id)
    {
        return DialogService.ShowDialogAsync<Detail>(id, new DialogParameters { Title = Resources.IDS_CONFIG_DETAIL_DIALOG_TITLE, PreventDismissOnOverlayClick = true });
    }
    
    private async Task OnResetSecretClicked(string id)
    {
        await DialogService.ShowDialogAsync<ResetSecret>(id, new DialogParameters { PreventDismissOnOverlayClick = true });
    }

    private async Task OnDeleteButtonClicked(string id, string name)
    {
        var message = string.Format(Resources.IDS_CONFIG_DELETE_CONFIRM_MESSAGE, name);
        var confirmation = await DialogService.ShowConfirmationAsync(message, primaryText: Resources.IDS_COMMON_YES, secondaryText: Resources.IDS_COMMON_NO, title: Resources.IDS_CONFIG_DELETE_CONFIRM_TITLE);
        var result = await confirmation.Result;
        if (!result.Cancelled)
        {
            try
            {
                await ConfigurationApi.DeleteAsync(id)
                                      .EnsureSuccess();
                await Pagination.SetCurrentPageIndexAsync(0);
                StateHasChanged();
            }
            catch (Exception exception)
            {
                exception.Send();
            }
        }
    }

    private async Task OnStatusChanged(ConfigurationDto context, bool status)
    {
        try
        {
            await ConfigurationApi.ChangeStatusAsync(context.Id, status ? "enable" : "disable").EnsureSuccess();
            context.Status = status ? "Pending" : "Disabled";
        }
        catch (Exception exception)
        {
            exception.Send();
        }
    }
}