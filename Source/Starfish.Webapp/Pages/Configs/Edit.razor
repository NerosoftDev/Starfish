@implements IDialogContentComponent<string>

@inject IConfigurationApi ConfigurationApi
@inject ITeamApi TeamApi

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Apps())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        @if (string.IsNullOrEmpty(Content))
        {
            <FluentSelect Style="width: 100%"
                          Required="true"
                          TOption="TeamItemDto"
                          Label="@(Resources.IDS_CONFIG_EDIT_DIALOG_LABEL_SELECT_TEAM)"
                          Items="@Teams"
                          OptionValue="@(p => p.Id.ToString())"
                          OptionText="@(p => p.Name)"
                          @bind-Value="@TeamId"/>
        }

        <FluentTextField Style="width: 100%" Required="true"
                         Label="@(Resources.IDS_CONFIG_EDIT_DIALOG_LABEL_NAME)"
                         @bind-Value="Name"/>

        @if (string.IsNullOrEmpty(Content))
        {
            <FluentTextField Style="width: 100%" Required="true"
                             Label="@(Resources.IDS_CONFIG_EDIT_DIALOG_LABEL_SECRET)"
                             @bind-Value="Secret"/>
        }
        <FluentTextArea Style="width: 100%"
                        Label="@(Resources.IDS_CONFIG_EDIT_DIALOG_LABEL_DESCRIPTION)"
                        @bind-Value="Description"/>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public string Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private List<TeamItemDto> Teams { get; } = [];

    /// <summary>
    /// 团队Id
    /// </summary>
    private string TeamId { get; set; }

    /// <summary>
    /// 应用名称
    /// </summary>
    private string Name { get; set; } = default!;

    /// <summary>
    /// 密钥
    /// </summary>
    private string Secret { get; set; }

    /// <summary>
    /// 应用描述
    /// </summary>
    private string Description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var tasks = new List<Task>
        {
            string.IsNullOrEmpty(Content) ? LoadTeamsAsync() : LoadDetailAsync(Content)
        };

        await Task.WhenAll(tasks);
    }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;

            if (!string.IsNullOrEmpty(Content))
            {
                var request = new ConfigurationEditDto
                {
                    Name = Name,
                    Description = Description
                };
                await ConfigurationApi.UpdateAsync(Content, request)
                                      .EnsureSuccess();
            }
            else
            {
                var request = new ConfigurationEditDto()
                {
                    Name = Name,
                    Secret = Secret,
                    Description = Description
                };
                await ConfigurationApi.CreateAsync(TeamId, request)
                                      .EnsureSuccess();
            }

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task LoadTeamsAsync()
    {
        await TeamApi.QueryAsync(new TeamCriteria(), 0, 100)
                     .EnsureSuccess(result =>
                     {
                         if (result == null)
                         {
                             return;
                         }

                         Teams.Clear();
                         Teams.AddRange(result);
                         if (result.Count > 0)
                         {
                             TeamId = result[0].Id.ToString();
                         }
                     })
                     .Guard();
    }

    private async Task LoadDetailAsync(string id)
    {
        if (string.IsNullOrEmpty(id))
        {
            return;
        }

        await ConfigurationApi.GetAsync(id)
                              .EnsureSuccess(result =>
                              {
                                  if (result == null)
                                  {
                                      return;
                                  }

                                  Content = result.Id;
                                  Name = result.Name;
                                  Description = result.Description;
                              })
                              .Guard(async _ =>
                              {
                                  await Dialog.CancelAsync();
                              });
    }

}