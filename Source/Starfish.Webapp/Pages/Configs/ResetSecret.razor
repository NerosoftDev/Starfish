@implements IDialogContentComponent<string>

@inject IConfigurationApi Api

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.LockClosedKey())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @(Resources.IDS_CONFIG_RESET_SECRET_DIALOG_TITLE)
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%" Required="true"
                         Label="@(Resources.IDS_CONFIG_RESET_SECRET_DIALOG_LABEL_SECRET)"
                         @bind-Value="Secret"/>
        <FluentLabel>@(Resources.IDS_CONFIG_RESET_SECRET_DIALOG_TIPS)</FluentLabel>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public string Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private string Secret { get; set; }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;

            var data = new ConfigurationSecretSetRequestDto
            {
                Secret = Secret
            };

            await Api.SetSecretAsync(Content, data)
                     .EnsureSuccess();

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}