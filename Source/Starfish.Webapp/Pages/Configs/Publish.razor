@implements IDialogContentComponent<EditDialogArgs>

@inject IConfigurationApi ConfigurationApi

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Settings())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%" Required="true"
                         Label="@(Resources.IDS_CONFIG_PUBLISH_DIALOG_LABEL_VERSION)"
                         @bind-Value="Request.Version"/>

        <FluentTextArea Style="width: 100%"
                        Label="@(Resources.IDS_CONFIG_PUBLISH_DIALOG_LABEL_COMMENT)"
                        @bind-Value="Request.Comment"/>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@PublishAsync" Loading="Loading">@(Resources.IDS_CONFIG_PUBLISH_DIALOG_BUTTON_PUBLISH)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public EditDialogArgs Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private ConfigurationPublishRequestDto Request { get; } = new();

    private async Task PublishAsync()
    {
        try
        {
            Loading = true;

            await ConfigurationApi.PublishAsync(Content.Id, Request)
                            .EnsureSuccess();

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}