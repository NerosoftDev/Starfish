@implements IDialogContentComponent<string>

@inject IUserApi UserApi

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.LockClosedKey())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @(Resources.IDS_APPS_RESET_SECRET_DIALOG_TITLE)
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_USER_LABEL_PASSWORD)"
                         @bind-Value="Password"
                         TextFieldType="TextFieldType.Password"/>
        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_USER_LABEL_CONFIRM_PASSWORD)"
                         @bind-Value="Confirm"
                         TextFieldType="TextFieldType.Password"/>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public string Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private string Password { get; set; }

    private string Confirm { get; set; }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;

            if (!string.Equals(Password, Confirm))
            {
                throw new ValidationException("Password and confirm password are not the same.");
            }

            var data = new ResetPasswordRequestDto()
            {
                Password = Password
            };

            await UserApi.ResetPassword(Content, data)
                         .EnsureSuccess();

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}