@implements IDialogContentComponent<string>

@inject IUserApi Api

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.People())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_USER_LABEL_USERNAME)"
                         @bind-Value="UserName"
                         ReadOnly="@(!string.IsNullOrEmpty(Content))" />
        @if (string.IsNullOrEmpty(Content))
        {
            <FluentTextField Style="width: 100%"
                             Label="@(Resources.IDS_USER_LABEL_PASSWORD)"
                             @bind-Value="Password"
                             TextFieldType="TextFieldType.Password" />
            <FluentTextField Style="width: 100%"
                             Label="@(Resources.IDS_USER_LABEL_CONFIRM_PASSWORD)"
                             @bind-Value="Confirm"
                             TextFieldType="TextFieldType.Password" />
        }
        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_USER_LABEL_NICKNAME)"
                         @bind-Value="NickName" />
        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_USER_LABEL_EMAIL)"
                         @bind-Value="Email"
                         TextFieldType="TextFieldType.Email" />

        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_USER_LABEL_PHONE)"
                         @bind-Value="Phone"
                         TextFieldType="TextFieldType.Tel" />

        <FluentSwitch Label="@(Resources.IDS_USER_LABEL_IS_ADMIN)" @bind-Value="IsAdmin" />
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public string Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private string UserName { get; set; }

    private string Password { get; set; }

    private string Confirm { get; set; }

    private string NickName { get; set; }

    private string Email { get; set; }

    private string Phone { get; set; }

    private bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAsync(Content);
    }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;
            if (!string.IsNullOrEmpty(Content))
            {
                var request = new UserUpdateDto
                    {
                        NickName = NickName,
                        Email = Email,
                        Phone = Phone,
                        IsAdmin = IsAdmin
                    };

                await Api.UpdateAsync(Content, request)
                         .EnsureSuccess();
            }
            else
            {
                if (!string.Equals(Password, Confirm))
                {
                    throw new ValidationException(Resources.IDS_ERROR_PASSWORD_NOT_MATCH);
                }

                var request = new UserCreateDto
                    {
                        UserName = UserName,
                        Password = Password,
                        NickName = NickName,
                        Email = Email,
                        Phone = Phone,
                        IsAdmin = IsAdmin
                    };

                await Api.CreateAsync(request)
                         .EnsureSuccess();
            }

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task LoadAsync(string id)
    {
        if (string.IsNullOrEmpty(id))
        {
            return;
        }

        await Api.GetAsync(id)
                 .EnsureSuccess(result =>
                 {
                     if (result == null)
                     {
                         return;
                     }

                     Content = result.Id;
                     UserName = result.UserName;
                     NickName = result.NickName;
                     Email = result.Email;
                     Phone = result.Phone;
                     IsAdmin = result.IsAdmin;
                 });
    }

}