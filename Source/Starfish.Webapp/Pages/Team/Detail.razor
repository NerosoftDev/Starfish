@page "/team/{id}"

@inject ITeamApi TeamApi
@inject IDialogService DialogService

<FluentBreadcrumb Style="margin-bottom: 16px;">
    <FluentBreadcrumbItem Href="/">@(Resources.IDS_MENU_TEXT_HOME)</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="/team">@(Resources.IDS_MENU_TEXT_TEAM)</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="@($"/team/{Id}")">@(Resources.IDS_BREADCRUMB_TEAM_DETAIL)</FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentCard>
    <FluentStack Orientation="Orientation.Horizontal" Width="100%">
        <FluentStack Orientation="Orientation.Vertical" Width="360px">
            <FluentPersona Name="@Data.Name" Initials="S" ImageSize="50px"/>
            <FluentLabel>@string.Format(Resources.IDS_TEAM_DETAIL_LABEL_ALIAS, Data.Id)</FluentLabel>
            <FluentLabel>@string.Format(Resources.IDS_TEAM_DETAIL_LABEL_CREATE_TIME, Data.CreateTime)</FluentLabel>
            <FluentLabel>@string.Format(Resources.IDS_TEAM_DETAIL_LABEL_UPDATE_TIME, Data.UpdateTime)</FluentLabel>
            <FluentDivider Style="width: 100%;"/>
            <FluentLabel>@Data.Description</FluentLabel>
            @if (Data.OwnerId != Identity?.UserId)
            {
                <FluentDivider Style="width: 100%;"/>
                <FluentLabel>@(Resources.IDS_COMMON_OPERATIONS)</FluentLabel>
                <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                    <FluentButton OnClick="@OnEditClicked">@(Resources.IDS_TEAM_DETAIL_BUTTON_EDIT)</FluentButton>
                    <FluentButton OnClick="@OnAppendMemberClicked">@(Resources.IDS_TEAM_DETAIL_BUTTON_ADD_MEMBER)</FluentButton>
                </FluentStack>
            }
        </FluentStack>
        <FluentDivider Orientation="Orientation.Vertical" Style="height: 100%"></FluentDivider>
        <div style="width:100%">
            <FluentDataGrid Items="@QueryableMembers" Style="width: 100%">
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_TEAM_DETAIL_COLUMN_USER_NAME)" Property="@(c => c.UserName)"/>
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_TEAM_DETAIL_COLUMN_NICK_NAME)" Property="@(c => c.NickName)"/>
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_TEAM_DETAIL_COLUMN_EMAIL)" Property="@(c => c.Email)"/>
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_TEAM_DETAIL_COLUMN_PHONE)" Property="@(c => c.Phone)"/>
                <TemplateColumn Title="@(Resources.IDS_COMMON_COLUMN_ACTIONS)" Align="@Align.Center">
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.DismissCircle())" Disabled="@(Identity.UserId == Data.OwnerId)" OnClick="@(() => OnRemoveMemberClicked(context.UserId))"/>
                </TemplateColumn>
            </FluentDataGrid>
        </div>
    </FluentStack>
</FluentCard>

@code {

    [Parameter]
    public string Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private UserPrincipal Identity { get; set; }

    private TeamDetailDto Data { get; } = new();

    private ObservableRangeCollection<TeamMemberDto> Members { get; } = [];

    private IQueryable<TeamMemberDto> QueryableMembers => Members.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationState;

        Identity = new UserPrincipal(user.User);

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var tasks = new List<Task>
        {
            LoadDetailAsync(),
            LoadMembersAsync()
        };

        await InvokeAsync(() => Task.WhenAll(tasks));
        StateHasChanged();
    }

    private Task LoadDetailAsync()
    {
        return TeamApi.GetAsync(Id)
                      .EnsureSuccess(result =>
                      {
                          Data.Name = result.Name;
                          Data.Description = result.Description;
                          Data.CreateTime = result.CreateTime;
                          Data.UpdateTime = result.UpdateTime;
                          Data.CreatedBy = result.CreatedBy;
                          Data.UpdatedBy = result.UpdatedBy;
                      });
    }

    private Task LoadMembersAsync()
    {
        return TeamApi.GetMembersAsync(Id)
                      .EnsureSuccess(result => Members.ReplaceRange(result));
    }

    private async Task OnRemoveMemberClicked(string userId)
    {
        var confirmation = await DialogService.ShowConfirmationAsync(Resources.IDS_TEAM_DETAIL_REMOVE_CONFIRMATION_MESSAGE, primaryText: Resources.IDS_COMMON_YES, secondaryText: Resources.IDS_COMMON_NO, title: Resources.IDS_TEAM_DETAIL_REMOVE_CONFIRMATION_TITLE);
        var result = await confirmation.Result;
        if (!result.Cancelled)
        {
            try
            {
                await TeamApi.RemoveMemberAsync(Id, [userId])
                             .EnsureSuccess();
                await LoadMembersAsync();
                StateHasChanged();
            }
            catch (Exception exception)
            {
                exception.Send();
            }
        }
    }

    private async Task OnAppendMemberClicked()
    {
        var reference = await DialogService.ShowDialogAsync<AppendMember>(Id, new DialogParameters { Title = Resources.IDS_TEAM_APPEND_MEMBER_DIALOG_TITLE, PreventDismissOnOverlayClick = true });
        var result = await reference.Result;
        if (!result.Cancelled)
        {
            await LoadMembersAsync();
            StateHasChanged();
        }
    }

    private async Task OnEditClicked()
    {
        await DialogService.ShowDialogAsync<Edit>(Id, new DialogParameters { Title = Resources.IDS_TEAM_EDIT_TITLE_EDIT, PreventDismissOnOverlayClick = true });
    }

}