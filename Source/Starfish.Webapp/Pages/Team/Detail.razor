@page "/team/{id:long}"

@inject ITeamApi TeamApi
@inject IAppsApi AppsApi
@inject IDialogService DialogService

<FluentBreadcrumb Style="margin-bottom: 16px;">
    <FluentBreadcrumbItem Href="/">@(Resources.IDS_MENU_TEXT_HOME)</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="/team">@(Resources.IDS_MENU_TEXT_TEAM)</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="@($"/team/{Id}")">@(Resources.IDS_BREADCRUMB_TEAM_DETAIL)</FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentCard>
    <FluentStack Orientation="Orientation.Horizontal" Width="100%">
        <FluentStack Orientation="Orientation.Vertical" Width="360px">
            <FluentPersona Name="@Data.Name" Initials="N" ImageSize="50px"/>
            <FluentLabel>Alias: @Data.Alias</FluentLabel>
            <FluentLabel>Created at: @Data.CreateTime.Date</FluentLabel>
            <FluentLabel>Updated at: @Data.UpdateTime.Date</FluentLabel>
            <FluentDivider Style="width: 100%;"/>
            <FluentLabel>@Data.Description</FluentLabel>
            @if (Data.OwnerId != Identity?.GetUserIdOfInt64())
            {
                <FluentDivider Style="width: 100%;"/>
                <FluentLabel>@(Resources.IDS_COMMON_OPERATIONS)</FluentLabel>
                <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                    <FluentButton OnClick="@OnEditClicked">@(Resources.IDS_TEAM_DETAIL_BUTTON_EDIT)</FluentButton>
                    <FluentButton OnClick="@OnAppendMemberClicked">@(Resources.IDS_TEAM_DETAIL_BUTTON_ADD_MEMBER)</FluentButton>
                </FluentStack>
            }
        </FluentStack>
        <FluentDivider Orientation="Orientation.Vertical" Style="height: 100%"></FluentDivider>
        <div style="width:100%">
            <FluentTabs Width="100%" Size="TabSize.Large">
                <FluentTab Label="Member">
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                        @foreach (var member in Members)
                        {
                            @if (Data.OwnerId != Identity?.GetUserIdOfInt64())
                            {
                                <FluentPersona Name="@member.NickName"
                                               ImageSize="50px"
                                               OnDismissClick="@(() => OnRemoveMemberClicked(member.UserId))"/>
                            }
                            else
                            {
                                <FluentPersona Name="@member.NickName" ImageSize="50px"/>
                            }
                        }
                    </FluentStack>
                </FluentTab>
                <FluentTab Label="Apps">
                    <FluentDataGrid Items="@QueryableApps" Style="width: 100%">
                        <PropertyColumn Title="Id" Property="@(c => c.Id)"/>
                        <PropertyColumn Title="Name" Property="@(c => c.Name)"/>
                        <PropertyColumn Title="Code" Property="@(c => c.Code)"/>
                        <PropertyColumn Title="Status" Property="@(c => c.StatusDescription)"/>
                    </FluentDataGrid>
                </FluentTab>
            </FluentTabs>
        </div>
    </FluentStack>
</FluentCard>

@code {

    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private UserPrincipal Identity { get; set; }

    private TeamDetailDto Data { get; } = new();

    private ObservableRangeCollection<TeamMemberDto> Members { get; } = [];

    private ObservableRangeCollection<AppInfoItemDto> Apps { get; } = [];

    private IQueryable<AppInfoItemDto> QueryableApps => Apps.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationState;

        Identity = new UserPrincipal(user.User);

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var tasks = new List<Task>
        {
            LoadDetailAsync(),
            LoadMembersAsync(),
            LoadAppsAsync()
        };

        await InvokeAsync(() => Task.WhenAll(tasks));
        StateHasChanged();
    }

    private Task LoadDetailAsync()
    {
        return TeamApi.GetAsync(Id)
                      .ContinueWith(task =>
                      {
                          var data = task.Result.EnsureSuccess();
                          Data.Name = data.Name;
                          Data.Alias = data.Alias;
                          Data.Description = data.Description;
                          Data.CreateTime = data.CreateTime;
                          Data.UpdateTime = data.UpdateTime;
                          Data.CreatedBy = data.CreatedBy;
                          Data.UpdatedBy = data.UpdatedBy;
                      });
    }

    private Task LoadMembersAsync()
    {
        return TeamApi.GetMembersAsync(Id)
                      .ContinueWith(task =>
                      {
                          var data = task.Result.EnsureSuccess();
                          Members.ReplaceRange(data);
                      });
    }

    private Task LoadAppsAsync()
    {
        try
        {
            var criteria = new AppInfoCriteria { TeamId = Id };
            return AppsApi.QueryAsync(criteria, 0, 100)
                          .ContinueWith(task =>
                          {
                              task.WaitAndUnwrapException();
                              var data = task.Result.EnsureSuccess();
                              Apps.ReplaceRange(data);
                          });
        }
        catch
        {
            return Task.CompletedTask;
        }
    }

    private async Task OnRemoveMemberClicked(long userId)
    {
        var confirmation = await DialogService.ShowConfirmationAsync(Resources.IDS_TEAM_DETAIL_REMOVE_CONFIRMATION_MESSAGE, primaryText: Resources.IDS_COMMON_YES, secondaryText: Resources.IDS_COMMON_NO, title: Resources.IDS_TEAM_DETAIL_REMOVE_CONFIRMATION_TITLE);
        var result = await confirmation.Result;
        if (!result.Cancelled)
        {
            try
            {
                await TeamApi.RemoveMemberAsync(Id, [userId])
                             .ContinueWith(task =>
                             {
                                 task.WaitAndUnwrapException();
                                 task.Result.EnsureSuccess();
                             });
                await LoadMembersAsync();
                StateHasChanged();
            }
            catch (Exception exception)
            {
                exception.Send();
            }
        }
    }

    private async Task OnAppendMemberClicked()
    {
        var reference = await DialogService.ShowDialogAsync<AppendMember>(Id, new DialogParameters { Title = Resources.IDS_TEAM_APPEND_MEMBER_DIALOG_TITLE, PreventDismissOnOverlayClick = true });
        var result = await reference.Result;
        if (!result.Cancelled)
        {
            await LoadMembersAsync();
            StateHasChanged();
        }
    }

    private async Task OnEditClicked()
    {
        await DialogService.ShowDialogAsync<Edit>(Id, new DialogParameters { Title = Resources.IDS_TEAM_EDIT_TITLE_EDIT, PreventDismissOnOverlayClick = true });
    }

}