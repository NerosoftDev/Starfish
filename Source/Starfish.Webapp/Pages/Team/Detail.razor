@page "/team/{id:int}"

@inject ITeamApi TeamApi
@inject IAppsApi AppsApi
@inject IDialogService DialogService

<FluentBreadcrumb Style="margin-bottom: 16px;">
    <FluentBreadcrumbItem Href="/">Home</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="/team">Team</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="@($"/team/{Id}")">Detail</FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentCard>
    <FluentStack Orientation="Orientation.Horizontal" Width="100%">
        <FluentStack Orientation="Orientation.Vertical" Width="360px">
            <FluentPersona Name="@Data.Name" Initials="N" ImageSize="50px"/>
            <FluentLabel>Alias: @Data.Alias</FluentLabel>
            <FluentLabel>Created at: @Data.CreateTime.Date</FluentLabel>
            <FluentLabel>Updated at: @Data.CreateTime.Date</FluentLabel>
            <FluentDivider Style="width: 100%;"/>
            <FluentLabel>@Data.Description</FluentLabel>
            <FluentDivider Style="width: 100%;"/>
            <FluentLabel>Operations</FluentLabel>
            <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                <FluentButton>编辑信息</FluentButton>
                <FluentButton OnClick="@OnAppendMemberClicked">添加成员</FluentButton>
            </FluentStack>
        </FluentStack>
        <FluentDivider Orientation="Orientation.Vertical" Style="height: 100%"></FluentDivider>
        <FluentTabs Width="100%" Size="TabSize.Large">
            <FluentTab Label="Member">
                <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                    @foreach (var member in Members)
                    {
                        <FluentPersona Name="@member.NickName"
                                       ImageSize="50px"
                                       OnDismissClick="@(() => OnRemoveMemberClicked(member.UserId))"/>
                    }
                </FluentStack>
            </FluentTab>
            <FluentTab Label="Apps">
                <FluentGrid></FluentGrid>
            </FluentTab>
        </FluentTabs>
    </FluentStack>
</FluentCard>

@code {

    [Parameter]
    public int Id { get; set; }

    private TeamDetailDto Data { get; } = new();

    private ObservableRangeCollection<TeamMemberDto> Members { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var tasks = new List<Task>
        {
            LoadDetailAsync(),
            LoadMembersAsync()
        };

        await InvokeAsync(() => Task.WhenAll(tasks));
        StateHasChanged();
    }

    private Task LoadDetailAsync()
    {
        return TeamApi.GetAsync(Id)
                      .ContinueWith(task =>
                      {
                          var data = task.Result.EnsureSuccess();
                          Data.Name = data.Name;
                          Data.Alias = data.Alias;
                          Data.Description = data.Description;
                          Data.CreateTime = data.CreateTime;
                          Data.UpdateTime = data.UpdateTime;
                          Data.CreatedBy = data.CreatedBy;
                          Data.UpdatedBy = data.UpdatedBy;
                      });
    }

    private Task LoadMembersAsync()
    {
        return TeamApi.GetMembersAsync(Id)
                      .ContinueWith(task =>
                      {
                          var data = task.Result.EnsureSuccess();
                          Members.ReplaceRange(data);
                      });
    }

    private async Task OnRemoveMemberClicked(int userId)
    {
        var confirmation = await DialogService.ShowConfirmationAsync("Are you sure to remove this member?", title: "Remove member");
        var result = await confirmation.Result;
        if (!result.Cancelled)
        {
            await TeamApi.RemoveMemberAsync(Id, [userId])
                         .ContinueWith(task =>
                         {
                             task.WaitAndUnwrapException();
                             task.Result.EnsureSuccess();
                         });
            await LoadMembersAsync();
            StateHasChanged();
        }
    }

    private async Task OnAppendMemberClicked()
    {
        var reference = await DialogService.ShowDialogAsync<AppendMember>(Id, new DialogParameters { Title = "Add member", Modal = true });
        var result = await reference.Result;
        if (!result.Cancelled)
        {
            await LoadMembersAsync();
            StateHasChanged();
        }
    }

}