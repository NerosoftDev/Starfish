@implements IDialogContentComponent<long>

@inject ITeamApi Api
@inject IToastService ToastService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.PeopleTeam())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_TEAM_EDIT_LABEL_NAME)"
                         @bind-Value="Name"/>

        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_TEAM_EDIT_LABEL_ALIAS)"
                         @bind-Value="Alias"/>
        <FluentTextArea Style="width: 100%"
                        Label="@(Resources.IDS_TEAM_EDIT_LABEL_DESCRIPTION)"
                        @bind-Value="Description"/>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public long Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private string Alias { get; set; }

    private string Name { get; set; }

    private string Description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAsync(Content);
    }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;
            var request = new TeamEditDto()
            {
                Name = Name,
                Alias = Alias,
                Description = Description
            };

            if (Content > 0)
            {
                await Api.UpdateAsync(Content, request)
                         .ContinueWith(task =>
                         {
                             task.WaitAndUnwrapException();
                             task.Result.EnsureSuccess();
                         });
            }
            else
            {
                await Api.CreateAsync(request)
                         .ContinueWith(task =>
                         {
                             task.WaitAndUnwrapException();
                             task.Result.EnsureSuccess();
                         });
            }

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            var message = exception.GetPromptMessage();
            ToastService.ShowError(message);
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task LoadAsync(long id)
    {
        if (id <= 0)
        {
            return;
        }

        await Api.GetAsync(id)
                 .ContinueWith(task =>
                 {
                     task.WaitAndUnwrapException();
                     var result = task.Result.EnsureSuccess();
                     if (result == null)
                     {
                         return;
                     }

                     Content = result.Id;
                     Alias = result.Alias;
                     Name = result.Name;
                     Description = result.Description;
                 });
    }

}