@using System.IO.Compression
@implements IDialogContentComponent<EditDialogArgs>

@inject ISettingApi SettingApi
@inject IToastService ToastService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Settings())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%" Required="true"
                         Label="@(Resources.IDS_SETTING_SYNC_REDIS_DIALOG_LABEL_CONNECTION)"
                         @bind-Value="ConnectionString"/>

        <FluentNumberField Style="width: 100%" Required="true"
                           Label="@(Resources.IDS_SETTING_SYNC_REDIS_DIALOG_LABEL_DATABASE)"
                           Max="12" Min="0" @bind-Value="Database"/>

        <FluentTextField Style="width: 100%" Required="true"
                         Label="@(Resources.IDS_SETTING_SYNC_REDIS_DIALOG_LABEL_KEY)"
                         @bind-Value="Key"/>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_SETTING_SYNC_REDIS_DIALOG_BUTTON_START)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public EditDialogArgs Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private string ConnectionString { get; set; }

    private int Database { get; set; }

    private string Key { get; set; }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;

            var raw = await SettingApi.GetArchivedAsync(Content.AppId, Content.Environment)
                                      .ContinueWith(task =>
                                      {
                                          task.WaitAndUnwrapException();
                                          return task.Result.EnsureSuccess();
                                      });

            var buffer = Convert.FromBase64String(raw);
            var items = Decompress(buffer, buffer.Length);
            
            // var connection = ConnectionMultiplexer.Connect(ConnectionString);
            // using (connection)
            // {
            //     var entries = items.Select(t => new HashEntry(t.Key, t.Value)).ToArray();

            //     await connection.GetDatabase(Database).HashSetAsync(Key, entries);
            //     await connection.GetDatabase(Database).KeyExpireAsync(Key, default(TimeSpan?));
            //     await connection.CloseAsync();
            // }

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            var message = exception.GetPromptMessage();
            ToastService.ShowError(message);
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private static Dictionary<string, string> Decompress(byte[] data, int count)
    {
        var stream = new MemoryStream(data, 0, count);
        var zip = new GZipStream(stream, CompressionMode.Decompress, true);
        var destStream = new MemoryStream();
        var buffer = new byte[0x1000];
        while (true)
        {
            var reader = zip.Read(buffer, 0, buffer.Length);
            if (reader <= 0)
            {
                break;
            }

            destStream.Write(buffer, 0, reader);
        }

        zip.Close();
        stream.Close();
        destStream.Position = 0;
        buffer = destStream.ToArray();
        destStream.Close();
        var content = Encoding.UTF8.GetString(buffer);
        return System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(content);
    }

}