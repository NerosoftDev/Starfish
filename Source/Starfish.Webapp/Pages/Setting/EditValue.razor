@implements IDialogContentComponent<EditDialogArgs>

@inject ISettingApi SettingApi
@inject IToastService ToastService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Settings())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%"
                         Label="Key"
                         Value="@Key" ReadOnly="true"/>

        <FluentTextArea Style="width: 100%"
                        Label="Value"
                        @bind-Value="Request.Value"/>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public EditDialogArgs Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private string Key => Content?.Properties?.TryGetValue("key") as string;

    private SettingValueUpdateDto Request { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        Request.Value = Content?.Properties?.TryGetValue("value") as string;
        await Task.CompletedTask;
    }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;
            await SettingApi.UpdateItemValueAsync(Content.AppId, Content.Environment, Key, Request)
                            .EnsureSuccess();
            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}