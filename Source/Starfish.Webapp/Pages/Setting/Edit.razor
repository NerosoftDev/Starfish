@using Nerosoft.Starfish.Common
@implements IDialogContentComponent<EditDialogArgs>

@inject ISettingApi SettingApi
@inject IToastService ToastService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Settings())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField Style="width: 100%"
                         Label="@(Resources.IDS_SETTING_EDIT_LABEL_ENVIRONMENT)"
                         @bind-Value="Content.Environment" ReadOnly="true"/>

        <div style="height: 100%; width: 100%;">
            <StandaloneCodeEditor @ref="_editor" CssClass="monaco-editor-container" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" />
        </div>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public EditDialogArgs Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private string Mode => Content?.Properties?.TryGetValue("mode") as string;

    private string Format => Content?.Properties?.TryGetValue("format") as string;

    private StandaloneCodeEditor _editor = null!;

    protected override async Task OnInitializedAsync()
    {
        if (Mode == "update")
        {
            await LoadValueAsync();
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        var options = new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Theme = "vs-dark"
        };

        options.Language = Format switch
        {
            Constants.Setting.FormatJson => "json",
            Constants.Setting.FormatText => "text",
            _ => options.Language
        };

        return options;
    }

    private async Task EditorOnDidInit()
    {
        await Task.CompletedTask;
    }

    private bool Loading { get; set; }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;
            var value = await _editor.GetValue();
            var request = new SettingEditDto()
            {
                Type = "diff",
                Data = Cryptography.Base64.Encrypt(value)
            };
            var task = Mode switch
            {
                "create" => SettingApi.CreateAsync(Content.AppId, Content.Environment, Format, request)
                                      .ContinueWith(task =>
                                      {
                                          task.WaitAndUnwrapException();
                                          task.Result.EnsureSuccess();
                                      }),
                "update" => SettingApi.UpdateAsync(Content.AppId, Content.Environment, Format, request)
                                      .ContinueWith(task =>
                                      {
                                          task.WaitAndUnwrapException();
                                          task.Result.EnsureSuccess();
                                      }),
                _ => Task.CompletedTask
            };
            await task;
            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private Task LoadValueAsync()
    {
        return SettingApi.GetItemsAsync(Content.AppId, Content.Environment, Format)
                         .ContinueWith(task =>
                         {
                             task.WaitAndUnwrapException();
                             var value = Cryptography.Base64.Decrypt(task.Result.EnsureSuccess());
                             _editor.SetValue(value);
                         })
                         .Guard();
    }
}