@implements IDialogContentComponent<long>

@inject IAppsApi AppsApi

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Apps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    @if (Loading)
    {
        <FluentStack Orientation="Orientation.Vertical">
            <FluentProgressRing Size="Size.Size48" />
        </FluentStack>
    }
    else
    {
        <FluentStack Orientation="Orientation.Vertical">

            <FluentTextField Style="width: 100%" Label="@(Resources.IDS_APPS_DETAIL_LABEL_NAME)"
                             Value="@Data.Name" ReadOnly="true" />

            <FluentTextField Style="width: 100%" Label="@(Resources.IDS_APPS_DETAIL_LABEL_CODE)"
                             Value="@Data.Code" ReadOnly="true" />

            <FluentSwitch Value="@(Data.Status == "Enabled")"
                          Label="@(Resources.IDS_APPS_DETAIL_LABEL_STATUS)" ReadOnly="true" />

            <FluentTextArea Style="width: 100%" Label="@(Resources.IDS_APPS_DETAIL_LABEL_DESCRIPTION)"
                            Value="@Data.Description" ReadOnly="true" />
        </FluentStack>
    }

</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CLOSE)</FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public long Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private AppInfoDetailDto Data { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Loading = true;

            await AppsApi.GetAsync(Content).ContinueWith(task =>
            {
                task.WaitAndUnwrapException();
                var result = task.Result.EnsureSuccess();
                Data.Name = result.Name;
                Data.Code = result.Code;
                Data.Description = result.Description;
                Data.Status = result.Status;
            });
        }
        catch (Exception exception)
        {
            exception.Send();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}