@page "/apps"

@attribute [Authorize]

@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IAppsApi Api

<FluentBreadcrumb Style="margin-bottom: 16px;">
    <FluentBreadcrumbItem Href="/">@(Resources.IDS_MENU_TEXT_HOME)</FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="/apps">@(Resources.IDS_MENU_TEXT_APPS)</FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentCard>
    <FluentGrid>
        <FluentGridItem lg="12" sm="12" md="12">
            <div class="search-bar">
                <FluentSearch Placeholder="@(Resources.IDS_COMMON_PLACEHOLDER_KEYWORD)"
                              @bind-Value="Criteria.Keyword" />
                <FluentButton IconStart="@(new Icons.Regular.Size16.Search())" OnClick="@OnSearchClicked">
                    @(Resources.IDS_COMMON_SEARCH)
                </FluentButton>
                <FluentSpacer />
                <FluentButton IconStart="@(new Icons.Regular.Size16.Add())" Appearance="Appearance.Accent"
                              OnClick="@(() => OnEditButtonClicked(0))">
                    @(Resources.IDS_APPS_INDEX_BUTTON_ADD)
                </FluentButton>
            </div>
        </FluentGridItem>
        <FluentGridItem lg="12" sm="12" md="12">
            <FluentDataGrid ItemsProvider="_provider" Pagination="Pagination" ItemSize="46"
                            GenerateHeader="GenerateHeaderOption.Sticky" TGridItem="AppInfoItemDto">
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_COMMON_COLUMN_ID)"
                                Property="@(c => c.Id)" />
                <TemplateColumn Title="@(Resources.IDS_APPS_INDEX_COLUMN_NAME)" Align="@Align.Start">
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => OnGotoSettingClicked(context.Id))">
                        @(context.Name)
                    </FluentButton>
                </TemplateColumn>
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_APPS_INDEX_COLUMN_CODE)"
                                Property="@(c => c.Code)" />
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_APPS_INDEX_COLUMN_TEAM)"
                                Property="@(c => c.TeamName)" />
                <PropertyColumn Class="data-grid-column" Title="@(Resources.IDS_COMMON_COLUMN_UPDATE_TIME)"
                                Property="@(c => c.UpdateTime)" Format="yyyy-MM-dd HH:mm:ss" />
                <TemplateColumn Title="@(Resources.IDS_APPS_INDEX_COLUMN_STATUS)" Align="@Align.Start">
                    <FluentSwitch Value="@(context.Status == "Enabled")" ValueChanged="@(value => OnStatusChanged(context, value))" />
                </TemplateColumn>
                <TemplateColumn Title="@(Resources.IDS_COMMON_COLUMN_ACTIONS)" Align="@Align.Center">
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.PreviewLink())"
                                  OnClick="@(() => OnDetailButtonClicked(context.Id))" />
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())"
                                  OnClick="@(() => OnEditButtonClicked(context.Id))" />
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.LockClosedKey())"
                                  OnClick="@(() => OnResetSecretClicked(context.Id))" />
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => OnDeleteButtonClicked(context.Id, context.Name))" />
                </TemplateColumn>
            </FluentDataGrid>
        </FluentGridItem>
        <FluentGridItem lg="12" sm="12" md="12">
            <FluentDataGridPaginator State="@Pagination" />
        </FluentGridItem>
    </FluentGrid>
</FluentCard>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private UserPrincipal User { get; set; }

    private GridItemsProvider<AppInfoItemDto> _provider;

    private PaginationState Pagination { get; } = new() { ItemsPerPage = Constants.Query.Count };

    private AppInfoCriteria Criteria { get; } = new();

    private int Total { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationState;

        User = new UserPrincipal(user.User);

        _provider = async request =>
        {
            List<AppInfoItemDto> items = null;
            var tasks = new List<Task>
                {
                Api.QueryAsync(Criteria, request.StartIndex, Pagination.ItemsPerPage, request.CancellationToken)
                   .EnsureSuccess(result=> items = result,request.CancellationToken)
                };

            if (request.StartIndex == 0)
            {
                tasks.Add(Api.CountAsync(Criteria, request.CancellationToken).EnsureSuccess(request.CancellationToken));
            }

            await Task.WhenAll(tasks).Guard();
            await Pagination.SetTotalItemCountAsync(Total);
            return GridItemsProviderResult.From(items, Total);
        };
    }

    private Task OnDetailButtonClicked(long id)
    {
        return DialogService.ShowDialogAsync<Detail>(id, new DialogParameters { Title = Resources.IDS_APPS_DETAIL_DIALOG_TITLE, PreventDismissOnOverlayClick = true });
    }

    private async Task OnGotoSettingClicked(long id)
    {
        Navigation.NavigateTo($"/apps/{id}/settings");
        await Task.CompletedTask;
    }

    private async Task OnEditButtonClicked(long id)
    {
        var title = id == 0 ? Resources.IDS_APPS_EDIT_TITLE_ADD : Resources.IDS_APPS_EDIT_TITLE_EDIT;
        var dialog = await DialogService.ShowDialogAsync<Edit>(id, new DialogParameters { Title = title, PreventDismissOnOverlayClick = true });
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            await Pagination.SetCurrentPageIndexAsync(0);
        }
    }

    private async Task OnDeleteButtonClicked(long id, string name)
    {
        var confirmationMessage = string.Format(Resources.IDS_APPS_INDEX_REMOVE_CONFIRMATION_MESSAGE, name);
        var confirmation = await DialogService.ShowConfirmationAsync(confirmationMessage, primaryText: Resources.IDS_COMMON_YES,
            secondaryText: Resources.IDS_COMMON_NO, title: Resources.IDS_APPS_INDEX_REMOVE_CONFIRMATION_TITLE);
        var result = await confirmation.Result;
        if (!result.Cancelled)
        {
            await Api.DeleteAsync(id).EnsureSuccess().Guard();
            await Pagination.SetCurrentPageIndexAsync(0);
        }
    }

    private async Task OnResetSecretClicked(long id)
    {
        await DialogService.ShowDialogAsync<ResetSecret>(id, new DialogParameters { PreventDismissOnOverlayClick = true });
    }

    private async Task OnSearchClicked()
    {
        await Pagination.SetCurrentPageIndexAsync(0);
    }

    private async Task OnStatusChanged(AppInfoItemDto context, bool status)
    {
        try
        {
            await Api.ChangeStatusAsync(context.Id, status ? "enable" : "disable").EnsureSuccess();
            context.Status = status ? "Enabled" : "Disabled";
        }
        catch (Exception exception)
        {
            exception.Send();
        }
    }
}