@implements IDialogContentComponent<long>

@inject IAppsApi AppsApi
@inject ITeamApi TeamApi
@inject IToastService ToastService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Apps())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        @if (Content == 0)
        {
            <FluentSelect Style="width: 100%"
                          Required="true"
                          TOption="TeamItemDto"
                          Label="@(Resources.IDS_APPS_EDIT_LABEL_SELECT_TEAM)"
                          Items="@Tesms"
                          OptionValue="@(p => p.Id.ToString())"
                          OptionText="@(p => p.Name)"
                          @bind-Value="@TeamId"/>
        }

        <FluentTextField Style="width: 100%" Required="true"
                         Label="@(Resources.IDS_APPS_EDIT_LABEL_NAME)"
                         @bind-Value="Name"/>
        @if (Content == 0)
        {
            <FluentTextField Style="width: 100%" Required="true"
                             Label="@(Resources.IDS_APPS_EDIT_LABEL_CODE)"
                             @bind-Value="Code"/>
            <FluentTextField Style="width: 100%" Required="true"
                             Label="@(Resources.IDS_APPS_EDIT_LABEL_SECRET)"
                             @bind-Value="Secret"/>
        }
        <FluentTextArea Style="width: 100%"
                        Label="@(Resources.IDS_APPS_EDIT_LABEL_DESCRIPTION)"
                        @bind-Value="Description"/>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Loading="Loading">@(Resources.IDS_COMMON_SAVE)</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">@(Resources.IDS_COMMON_CANCEL)</FluentButton>
</FluentDialogFooter>

@code {

    [Parameter]
    public long Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private bool Loading { get; set; }

    private List<TeamItemDto> Tesms { get; } = new();

    /// <summary>
    /// 团队Id
    /// </summary>
    private string TeamId { get; set; }

    /// <summary>
    /// 应用名称
    /// </summary>
    private string Name { get; set; } = default!;

    /// <summary>
    /// 应用代码
    /// </summary>
    private string Code { get; set; } = default!;

    /// <summary>
    /// 密钥
    /// </summary>
    private string Secret { get; set; }

    /// <summary>
    /// 应用描述
    /// </summary>
    private string Description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var tasks = new List<Task>
        {
            LoadDetailAsync(Content)
        };
        if (Content == 0)
        {
            tasks.Add(LoadTeamsAsync());
        }

        await Task.WhenAll(tasks);
    }

    private async Task SaveAsync()
    {
        try
        {
            Loading = true;

            if (Content > 0)
            {
                var request = new AppInfoUpdateDto()
                {
                    Name = Name,
                    Description = Description
                };
                await AppsApi.UpdateAsync(Content, request)
                             .ContinueWith(task =>
                             {
                                 task.WaitAndUnwrapException();
                                 task.Result.EnsureSuccess();
                             });
            }
            else
            {
                var request = new AppInfoCreateDto()
                {
                    TeamId = int.Parse(TeamId),
                    Name = Name,
                    Code = Code,
                    Secret = Secret,
                    Description = Description
                };
                await AppsApi.CreateAsync(request)
                             .ContinueWith(task =>
                             {
                                 task.WaitAndUnwrapException();
                                 task.Result.EnsureSuccess();
                             });
            }

            await Dialog.CloseAsync(Content);
        }
        catch (Exception exception)
        {
            var message = exception.GetPromptMessage();
            ToastService.ShowError(message);
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task LoadTeamsAsync()
    {
        await TeamApi.QueryAsync(new TeamCriteria(), 1, 100)
                     .ContinueWith(task =>
                     {
                         task.WaitAndUnwrapException();
                         var result = task.Result.EnsureSuccess();
                         if (result == null)
                         {
                             return;
                         }

                         Tesms.Clear();
                         Tesms.AddRange(result);
                         if (result.Count > 0)
                         {
                             TeamId = result[0].Id.ToString();
                         }
                     });
    }

    private async Task LoadDetailAsync(long id)
    {
        if (id <= 0)
        {
            return;
        }

        await AppsApi.GetAsync(id)
                     .ContinueWith(task =>
                     {
                         task.WaitAndUnwrapException();
                         var result = task.Result.EnsureSuccess();
                         if (result == null)
                         {
                             return;
                         }

                         Content = result.Id;
                         Code = result.Code;
                         Name = result.Name;
                         Description = result.Description;
                     });
    }

}