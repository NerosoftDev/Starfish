@using System.Security.Authentication
@inherits LayoutComponentBase
@implements IDisposable
@attribute [Authorize]

@inject AuthenticationStateProvider Authentication
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject ExceptionRecipient Recipient

<FluentDesignTheme Mode="DesignThemeModes.Dark" OfficeColor="OfficeColor.Office"/>
<FluentLayout>
    <FluentHeader>
        Starfish
        <FluentSpacer/>
        @* <div style="display: flex; gap: 10px;">
            <FluentIcon Color="Color.Lightweight" Value="@(new Icons.Filled.Size20.Alert())"/>

            <FluentIcon Color="Color.Lightweight" Value="@(new Icons.Filled.Size20.Settings())"/>

            <FluentPersona Name="@(Identity?.Username ?? "starfish")" Id="persona"
                           ImageSize="36px"
                           Image="https://s.gravatar.com/avatar/38a519cc759f85fc814868d0656c0c18?s=480"
                           Status="PresenceStatus.Available"
                           StatusSize="PresenceBadgeSize.Small"/>
        </div> *@
    </FluentHeader>

    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <FluentNavMenu Width="360" Class="nav-menu-panel" Collapsible="true">
            <FluentNavLink Icon="@(new Icons.Regular.Size24.Home())" Href="/" Match="NavLinkMatch.All">@(Resources.IDS_MENU_TEXT_HOME)</FluentNavLink>
            <FluentNavLink Icon="@(new Icons.Regular.Size24.Apps())" Href="/apps">@(Resources.IDS_MENU_TEXT_APPS)</FluentNavLink>
            @if (Identity?.IsInRole("SA") == true)
            {
                <FluentNavLink Icon="@(new Icons.Regular.Size24.People())" Href="/user">@(Resources.IDS_MENU_TEXT_USER)</FluentNavLink>
            }
            <FluentNavLink Icon="@(new Icons.Regular.Size24.PeopleTeam())" Href="/team">@(Resources.IDS_MENU_TEXT_TEAM)</FluentNavLink>
            <FluentNavLink Icon="@(new Icons.Regular.Size24.DocumentText())" Href="/logs">@(Resources.IDS_MENU_TEXT_LOGS)</FluentNavLink>
        </FluentNavMenu>
        <FluentBodyContent>
            @if (!Constants.IsDebug)
            {
                <ErrorBoundary>
                    <ChildContent>
                        <div class="content">
                            @Body
                        </div>
                    </ChildContent>

                    <ErrorContent Context="ex">
                        @if (ex is AuthenticationException)
                        {
                            <Redirect Uri="/login"/>
                        }
                        else if (ex is HttpRequestException e && e.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                        {
                            <Redirect Uri="/login"/>
                        }
                        else
                        {
                            <div class="blazor-error-boundary">@ex.Message</div>
                        }
                    </ErrorContent>

                </ErrorBoundary>
            }
            else
            {
                <div class="content">
                    @Body
                </div>
            }
        </FluentBodyContent>
    </FluentStack>

    <FluentFooter>
        <div class="link1">
            <span>Nerosoft © @(DateTime.Today.Year). All rights reserved.</span>
        </div>
        <div class="link2">
            <a href="javascript:void(0);" @onclick="@OnLogoutClicked">@(Resources.IDS_COMMON_LOGOUT)</a>
        </div>
    </FluentFooter>

    <FluentToastProvider MaxToastCount="10"/>
    <FluentDialogProvider/>
</FluentLayout>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private UserPrincipal Identity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationState;
        Identity = new UserPrincipal(state.User);
        StateHasChanged();

        Authentication.AuthenticationStateChanged += OnAuthenticationStateChanged;

        Recipient.Subscribe(OnExceptionReceived);
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var state = await AuthenticationState;
        if (state.User.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/login");
        }
    }

    private static async Task OnLogoutClicked(MouseEventArgs args)
    {
        WeakReferenceMessenger.Default.Send(new AuthenticationStateMessage("logout"));
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        Authentication.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        AuthenticationState?.Dispose();
        WeakReferenceMessenger.Default.UnregisterAll(this);
    }

    private void OnExceptionReceived(Exception exception)
    {
        switch (exception)
        {
            case UnauthorizedAccessException:
            case HttpRequestException { StatusCode: System.Net.HttpStatusCode.Unauthorized }:
                var returnUrl = Navigation.Uri;
                Navigation.NavigateTo($"/login?returnUrl={returnUrl}");
                break;
            default:
                var message = exception.GetPromptMessage();
                ToastService.ShowError(message);
                break;
        }
    }
}